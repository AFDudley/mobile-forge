--- orig/src/libsodium/dist-build/apple-xcframework.sh	2025-05-18 04:10:27
+++ patched/src/libsodium/dist-build/apple-xcframework.sh	2025-05-18 16:20:21
@@ -1,34 +1,14 @@
 #! /bin/sh
 
 export PREFIX="$(pwd)/libsodium-apple"
-export MACOS_ARM64_PREFIX="${PREFIX}/tmp/macos-arm64"
-export MACOS_X86_64_PREFIX="${PREFIX}/tmp/macos-x86_64"
-export IOS32_PREFIX="${PREFIX}/tmp/ios32"
-export IOS32s_PREFIX="${PREFIX}/tmp/ios32s"
 export IOS64_PREFIX="${PREFIX}/tmp/ios64"
+export IOS64E_PREFIX="${PREFIX}/tmp/ios64e"
 export IOS_SIMULATOR_ARM64_PREFIX="${PREFIX}/tmp/ios-simulator-arm64"
-export IOS_SIMULATOR_I386_PREFIX="${PREFIX}/tmp/ios-simulator-i386"
-export IOS_SIMULATOR_X86_64_PREFIX="${PREFIX}/tmp/ios-simulator-x86_64"
-export WATCHOS32_PREFIX="${PREFIX}/tmp/watchos32"
-export WATCHOS64_32_PREFIX="${PREFIX}/tmp/watchos64_32"
-export WATCHOS_SIMULATOR_ARM64_PREFIX="${PREFIX}/tmp/watchos-simulator-arm64"
-export WATCHOS_SIMULATOR_I386_PREFIX="${PREFIX}/tmp/watchos-simulator-i386"
-export WATCHOS_SIMULATOR_X86_64_PREFIX="${PREFIX}/tmp/watchos-simulator-x86_64"
-export TVOS64_PREFIX="${PREFIX}/tmp/tvos64"
-export TVOS_SIMULATOR_ARM64_PREFIX="${PREFIX}/tmp/tvos-simulator-arm64"
-export TVOS_SIMULATOR_X86_64_PREFIX="${PREFIX}/tmp/tvos-simulator-x86_64"
-export CATALYST_ARM64_PREFIX="${PREFIX}/tmp/catalyst-arm64"
-export CATALYST_X86_64_PREFIX="${PREFIX}/tmp/catalyst-x86_64"
 export LOG_FILE="${PREFIX}/tmp/build_log"
 export XCODEDIR="$(xcode-select -p)"
 
-export MACOS_VERSION_MIN=${MACOS_VERSION_MIN-"10.10"}
-export IOS_SIMULATOR_VERSION_MIN=${IOS_SIMULATOR_VERSION_MIN-"9.0.0"}
-export IOS_VERSION_MIN=${IOS_VERSION_MIN-"9.0.0"}
-export WATCHOS_SIMULATOR_VERSION_MIN=${WATCHOS_SIMULATOR_VERSION_MIN-"4.0.0"}
-export WATCHOS_VERSION_MIN=${WATCHOS_VERSION_MIN-"4.0.0"}
-export TVOS_SIMULATOR_VERSION_MIN=${TVOS_SIMULATOR_VERSION_MIN-"9.0.0"}
-export TVOS_VERSION_MIN=${TVOS_VERSION_MIN-"9.0.0"}
+export IOS_VERSION_MIN=${IOS_VERSION_MIN-"13.0.0"}
+export IOS_SIMULATOR_VERSION_MIN=${IOS_SIMULATOR_VERSION_MIN-$IOS_VERSION_MIN}
 
 echo
 echo "Warnings related to headers being present but not usable are due to functions"
@@ -36,16 +16,8 @@
 echo "They can be safely ignored."
 echo
 
-if [ -z "$LIBSODIUM_FULL_BUILD" ]; then
-  export LIBSODIUM_ENABLE_MINIMAL_FLAG="--enable-minimal"
-else
-  export LIBSODIUM_ENABLE_MINIMAL_FLAG=""
-fi
+export LIBSODIUM_ENABLE_MINIMAL_FLAG=""
 
-APPLE_SILICON_SUPPORTED=false
-echo 'int main(void){return 0;}' >comptest.c && cc --target=arm64-macos comptest.c 2>/dev/null && APPLE_SILICON_SUPPORTED=true
-rm -f comptest.c
-
 NPROCESSORS=$(getconf NPROCESSORS_ONLN 2>/dev/null || getconf _NPROCESSORS_ONLN 2>/dev/null)
 PROCESSORS=${NPROCESSORS:-3}
 
@@ -56,62 +28,77 @@
   echo '}'
 }
 
-build_macos() {
-  export BASEDIR="${XCODEDIR}/Platforms/MacOSX.platform/Developer"
+build_ios() {
+  echo "DEBUG: Starting iOS build process" >> "$LOG_FILE"
+  echo "DEBUG: XCODEDIR=${XCODEDIR}" >> "$LOG_FILE"
+
+  export BASEDIR="${XCODEDIR}/Platforms/iPhoneOS.platform/Developer"
   export PATH="${BASEDIR}/usr/bin:$BASEDIR/usr/sbin:$PATH"
+  export SDK="${BASEDIR}/SDKs/iPhoneOS.sdk"
 
-  ## macOS arm64
-  if [ "$APPLE_SILICON_SUPPORTED" = "true" ]; then
-    export CFLAGS="-O2 -arch arm64 -mmacosx-version-min=${MACOS_VERSION_MIN}"
-    export LDFLAGS="-arch arm64 -mmacosx-version-min=${MACOS_VERSION_MIN}"
+  echo "DEBUG: Checking iOS platform directories" >> "$LOG_FILE"
+  if [ ! -d "${XCODEDIR}/Platforms/iPhoneOS.platform" ]; then
+    echo "DEBUG: ERROR - iPhoneOS platform directory does not exist: ${XCODEDIR}/Platforms/iPhoneOS.platform" >> "$LOG_FILE"
+    echo "ERROR: iPhoneOS platform not found, skipping iOS builds" >&2
+    return 1
+  fi
 
-    make distclean >/dev/null 2>&1
-    ./configure --host=arm-apple-darwin20 --prefix="$MACOS_ARM64_PREFIX" \
-      ${LIBSODIUM_ENABLE_MINIMAL_FLAG} || exit 1
-    make -j${PROCESSORS} install || exit 1
+  if [ ! -d "$SDK" ]; then
+    echo "DEBUG: ERROR - iOS SDK directory does not exist: $SDK" >> "$LOG_FILE"
+    echo "ERROR: iOS SDK not found, skipping iOS builds" >&2
+    return 1
   fi
 
-  ## macOS x86_64
-  export CFLAGS="-O2 -arch x86_64 -mmacosx-version-min=${MACOS_VERSION_MIN}"
-  export LDFLAGS="-arch x86_64 -mmacosx-version-min=${MACOS_VERSION_MIN}"
+  echo "DEBUG: iOS platform directories validated" >> "$LOG_FILE"
+  echo "DEBUG: BASEDIR=$BASEDIR" >> "$LOG_FILE"
+  echo "DEBUG: SDK=$SDK" >> "$LOG_FILE"
+  echo "DEBUG: IOS_VERSION_MIN=$IOS_VERSION_MIN" >> "$LOG_FILE"
 
+  echo "DEBUG: Building for 64-bit iOS (arm64)" >> "$LOG_FILE"
+  ## 64-bit iOS
+  export CFLAGS="-O3 -arch arm64 -isysroot ${SDK} -mios-version-min=${IOS_VERSION_MIN}"
+  export LDFLAGS="-arch arm64 -isysroot ${SDK} -mios-version-min=${IOS_VERSION_MIN}"
+
   make distclean >/dev/null 2>&1
-  ./configure --host=x86_64-apple-darwin10 --prefix="$MACOS_X86_64_PREFIX" \
-    ${LIBSODIUM_ENABLE_MINIMAL_FLAG} || exit 1
-  make -j${PROCESSORS} install || exit 1
-}
+  echo "DEBUG: Running configure for IOS64" >> "$LOG_FILE"
+  ./configure --host=aarch64-apple-darwin23 --prefix="$IOS64_PREFIX" \
+    ${LIBSODIUM_ENABLE_MINIMAL_FLAG} >> "$LOG_FILE" 2>&1 || {
+      echo "DEBUG: ERROR - configure failed for IOS64" >> "$LOG_FILE"
+      echo "ERROR: configure failed for 64-bit iOS" >&2
+      return 1
+    }
 
-build_ios() {
-  export BASEDIR="${XCODEDIR}/Platforms/iPhoneOS.platform/Developer"
-  export PATH="${BASEDIR}/usr/bin:$BASEDIR/usr/sbin:$PATH"
-  export SDK="${BASEDIR}/SDKs/iPhoneOS.sdk"
+  echo "DEBUG: Running make install for IOS64" >> "$LOG_FILE"
+  make -j${PROCESSORS} install >> "$LOG_FILE" 2>&1 || {
+      echo "DEBUG: ERROR - make install failed for IOS64" >> "$LOG_FILE"
+      echo "ERROR: make install failed for 64-bit iOS" >&2
+      return 1
+    }
+  echo "DEBUG: Successfully built for IOS64" >> "$LOG_FILE"
 
-  ## 32-bit iOS
-  export CFLAGS="-fembed-bitcode -O2 -mthumb -arch armv7 -isysroot ${SDK} -mios-version-min=${IOS_VERSION_MIN}"
-  export LDFLAGS="-fembed-bitcode -mthumb -arch armv7 -isysroot ${SDK} -mios-version-min=${IOS_VERSION_MIN}"
+  echo "DEBUG: Building for 64-bit iOS (arm64e)" >> "$LOG_FILE"
+  ## 64-bit iOS arm64e
+  export CFLAGS="-O3 -arch arm64e -isysroot ${SDK} -mios-version-min=${IOS_VERSION_MIN}"
+  export LDFLAGS="-arch arm64e -isysroot ${SDK} -mios-version-min=${IOS_VERSION_MIN}"
 
   make distclean >/dev/null 2>&1
-  ./configure --host=arm-apple-darwin10 --prefix="$IOS32_PREFIX" \
-    ${LIBSODIUM_ENABLE_MINIMAL_FLAG} || exit 1
-  make -j${PROCESSORS} install || exit 1
+  echo "DEBUG: Running configure for IOS64E" >> "$LOG_FILE"
+  ./configure --host=aarch64-apple-darwin23 --prefix="$IOS64E_PREFIX" \
+    ${LIBSODIUM_ENABLE_MINIMAL_FLAG} >> "$LOG_FILE" 2>&1 || {
+      echo "DEBUG: ERROR - configure failed for IOS64E" >> "$LOG_FILE"
+      echo "ERROR: configure failed for 64-bit iOS (arm64e)" >&2
+      return 1
+    }
 
-  ## 32-bit armv7s iOS
-  export CFLAGS="-fembed-bitcode -O2 -mthumb -arch armv7s -isysroot ${SDK} -mios-version-min=${IOS_VERSION_MIN}"
-  export LDFLAGS="-fembed-bitcode -mthumb -arch armv7s -isysroot ${SDK} -mios-version-min=${IOS_VERSION_MIN}"
+  echo "DEBUG: Running make install for IOS64E" >> "$LOG_FILE"
+  make -j${PROCESSORS} install >> "$LOG_FILE" 2>&1 || {
+      echo "DEBUG: ERROR - make install failed for IOS64E" >> "$LOG_FILE"
+      echo "ERROR: make install failed for 64-bit iOS (arm64e)" >&2
+      return 1
+    }
+  echo "DEBUG: Successfully built for IOS64E" >> "$LOG_FILE"
 
-  make distclean >/dev/null 2>&1
-  ./configure --host=arm-apple-darwin10 --prefix="$IOS32s_PREFIX" \
-    ${LIBSODIUM_ENABLE_MINIMAL_FLAG} || exit 1
-  make -j${PROCESSORS} install || exit 1
-
-  ## 64-bit iOS
-  export CFLAGS="-fembed-bitcode -O2 -arch arm64 -isysroot ${SDK} -mios-version-min=${IOS_VERSION_MIN}"
-  export LDFLAGS="-fembed-bitcode -arch arm64 -isysroot ${SDK} -mios-version-min=${IOS_VERSION_MIN}"
-
-  make distclean >/dev/null 2>&1
-  ./configure --host=arm-apple-darwin10 --prefix="$IOS64_PREFIX" \
-    ${LIBSODIUM_ENABLE_MINIMAL_FLAG} || exit 1
-  make -j${PROCESSORS} install || exit 1
+  echo "DEBUG: iOS build process completed successfully" >> "$LOG_FILE"
 }
 
 build_ios_simulator() {
@@ -120,319 +107,141 @@
   export SDK="${BASEDIR}/SDKs/iPhoneSimulator.sdk"
 
   ## arm64 simulator
-  if [ "$APPLE_SILICON_SUPPORTED" = "true" ]; then
-    export CFLAGS="-fembed-bitcode -O2 -arch arm64 -isysroot ${SDK} -mios-simulator-version-min=${IOS_SIMULATOR_VERSION_MIN}"
-    export LDFLAGS="-fembed-bitcode -arch arm64 -isysroot ${SDK} -mios-simulator-version-min=${IOS_SIMULATOR_VERSION_MIN}"
+  echo "Building for arm64 iOS simulator" >&2
+  export CFLAGS="-O3 -arch arm64 -isysroot ${SDK} -mios-simulator-version-min=${IOS_SIMULATOR_VERSION_MIN}"
+  export LDFLAGS="-arch arm64 -isysroot ${SDK} -mios-simulator-version-min=${IOS_SIMULATOR_VERSION_MIN}"
 
-    make distclean >/dev/null 2>&1
-    ./configure --host=arm-apple-darwin20 --prefix="$IOS_SIMULATOR_ARM64_PREFIX" \
-      ${LIBSODIUM_ENABLE_MINIMAL_FLAG} || exit 1
-    make -j${PROCESSORS} install || exit 1
-  fi
-
-  ## i386 simulator
-  export CFLAGS="-fembed-bitcode -O2 -arch i386 -isysroot ${SDK} -mios-simulator-version-min=${IOS_SIMULATOR_VERSION_MIN}"
-  export LDFLAGS="-fembed-bitcode -arch i386 -isysroot ${SDK} -mios-simulator-version-min=${IOS_SIMULATOR_VERSION_MIN}"
-
   make distclean >/dev/null 2>&1
-  ./configure --host=i686-apple-darwin10 --prefix="$IOS_SIMULATOR_I386_PREFIX" \
-    ${LIBSODIUM_ENABLE_MINIMAL_FLAG} || exit 1
-  make -j${PROCESSORS} install || exit 1
+  ./configure --host=aarch64-apple-darwin23 --prefix="$IOS_SIMULATOR_ARM64_PREFIX" \
+    ${LIBSODIUM_ENABLE_MINIMAL_FLAG} >> "$LOG_FILE" 2>&1 || {
+      echo "ERROR: configure failed for arm64 iOS simulator" >&2
+      echo "DEBUG: configure failed for arm64 iOS simulator" >> "$LOG_FILE"
+      return 1  # This is critical, so return error
+    }
 
-  ## x86_64 simulator
-  export CFLAGS="-fembed-bitcode -O2 -arch x86_64 -isysroot ${SDK} -mios-simulator-version-min=${IOS_SIMULATOR_VERSION_MIN}"
-  export LDFLAGS="-fembed-bitcode -arch x86_64 -isysroot ${SDK} -mios-simulator-version-min=${IOS_SIMULATOR_VERSION_MIN}"
-
-  make distclean >/dev/null 2>&1
-  ./configure --host=x86_64-apple-darwin10 --prefix="$IOS_SIMULATOR_X86_64_PREFIX" \
-    ${LIBSODIUM_ENABLE_MINIMAL_FLAG}
-  make -j${PROCESSORS} install || exit 1
+  make -j${PROCESSORS} install >> "$LOG_FILE" 2>&1 || {
+      echo "ERROR: make install failed for arm64 iOS simulator" >&2
+      echo "DEBUG: make install failed for arm64 iOS simulator" >> "$LOG_FILE"
+      return 1  # This is critical, so return error
+    }
 }
 
-build_watchos() {
-  export BASEDIR="${XCODEDIR}/Platforms/WatchOS.platform/Developer"
-  export PATH="${BASEDIR}/usr/bin:$BASEDIR/usr/sbin:$PATH"
-  export SDK="${BASEDIR}/SDKs/WatchOS.sdk"
+mkdir -p "${PREFIX}/tmp"
 
-  # 32-bit watchOS
-  export CFLAGS="-fembed-bitcode -O2 -mthumb -arch armv7k -isysroot ${SDK} -mwatchos-version-min=${WATCHOS_VERSION_MIN}"
-  export LDFLAGS="-fembed-bitcode -mthumb -arch armv7k -isysroot ${SDK} -mwatchos-version-min=${WATCHOS_VERSION_MIN}"
+echo "Building for iOS..."
+# Use regular redirection to log file but print errors to stderr
+build_ios 2>&1 | tee -a "$LOG_FILE" || {
+  echo "iOS build failed! Check the log file at $LOG_FILE for details"
+  echo "Adding iOS build failed marker to log"
+  echo "ERROR: iOS build process failed" >> "$LOG_FILE"
+}
 
-  make distclean >/dev/null 2>&1
-  ./configure --host=arm-apple-darwin10 --prefix="$WATCHOS32_PREFIX" \
-    ${LIBSODIUM_ENABLE_MINIMAL_FLAG} || exit 1
-  make -j${PROCESSORS} install || exit 1
+if [ -z "$LIBSODIUM_SKIP_SIMULATORS" ]; then
+  build_ios_simulator 2>&1 | tee -a "$LOG_FILE" || {
+    echo "WARNING: iOS simulator build failed but continuing with other architectures" >&2
+    echo "DEBUG: iOS simulator build failed" >> "$LOG_FILE"
+  }
+else
+  echo "[Skipping the simulators]"
+fi
 
-  ## 64-bit arm64_32 watchOS
-  export CFLAGS="-fembed-bitcode -O2 -mthumb -arch arm64_32 -isysroot ${SDK} -mwatchos-version-min=${WATCHOS_VERSION_MIN}"
-  export LDFLAGS="-fembed-bitcode -mthumb -arch arm64_32 -isysroot ${SDK} -mwatchos-version-min=${WATCHOS_VERSION_MIN}"
+echo "Adding the Clibsodium module map for Swift..."
 
-  make distclean >/dev/null 2>&1
-  ./configure --host=arm-apple-darwin10 --prefix="$WATCHOS64_32_PREFIX" \
-    ${LIBSODIUM_ENABLE_MINIMAL_FLAG} || exit 1
-  make -j${PROCESSORS} install || exit 1
-}
+find "$PREFIX" -name "include" -type d -print | while read -r f; do
+  swift_module_map >"${f}/module.modulemap"
+done
 
-build_watchos_simulator() {
-  export BASEDIR="${XCODEDIR}/Platforms/WatchSimulator.platform/Developer"
-  export PATH="${BASEDIR}/usr/bin:$BASEDIR/usr/sbin:$PATH"
-  export SDK="${BASEDIR}/SDKs/WatchSimulator.sdk"
+echo "Bundling iOS targets..."
 
-  ## arm64 simulator
-  if [ "$APPLE_SILICON_SUPPORTED" = "true" ]; then
-    export CFLAGS="-fembed-bitcode -O2 -arch arm64 -isysroot ${SDK} -mwatchos-simulator-version-min=${WATCHOS_SIMULATOR_VERSION_MIN}"
-    export LDFLAGS="-fembed-bitcode -arch arm64 -isysroot ${SDK} -mwatchos-simulator-version-min=${WATCHOS_SIMULATOR_VERSION_MIN}"
+# Check if the required iOS libraries exist before attempting to bundle
+if [ ! -d "${IOS64_PREFIX}" ]; then
+  echo "DEBUG: ERROR - iOS arm64 libraries not found at ${IOS64_PREFIX}" >> "$LOG_FILE"
+  echo "ERROR: Cannot bundle iOS targets - iOS arm64 libraries not found at ${IOS64_PREFIX}" >&2
+  echo "DEBUG: This means build_ios() failed or was skipped" >> "$LOG_FILE"
+else
+  mkdir -p "${PREFIX}/ios/lib"
 
-    make distclean >/dev/null 2>&1
-    ./configure --host=arm-apple-darwin20 --prefix="$WATCHOS_SIMULATOR_ARM64_PREFIX" \
-      ${LIBSODIUM_ENABLE_MINIMAL_FLAG} || exit 1
-    make -j${PROCESSORS} install || exit 1
+  # Check if we can access the includes directory
+  if [ ! -d "${IOS64_PREFIX}/include" ]; then
+    echo "DEBUG: ERROR - iOS include directory not found at ${IOS64_PREFIX}/include" >> "$LOG_FILE"
+    echo "ERROR: iOS include directory missing" >&2
+  else
+    echo "DEBUG: Copying iOS includes from ${IOS64_PREFIX}/include" >> "$LOG_FILE"
+    cp -a "${IOS64_PREFIX}/include" "${PREFIX}/ios/"
   fi
 
-  ## i386 simulator
-  export CFLAGS="-fembed-bitcode -O2 -arch i386 -isysroot ${SDK} -mwatchos-simulator-version-min=${WATCHOS_SIMULATOR_VERSION_MIN}"
-  export LDFLAGS="-fembed-bitcode -arch i386 -isysroot ${SDK} -mwatchos-simulator-version-min=${WATCHOS_SIMULATOR_VERSION_MIN}"
+  for ext in a dylib; do
+    echo "DEBUG: Bundling iOS libraries with extension .${ext}" >> "$LOG_FILE"
 
-  make distclean >/dev/null 2>&1
-  ./configure --host=i686-apple-darwin10 --prefix="$WATCHOS_SIMULATOR_I386_PREFIX" \
-    ${LIBSODIUM_ENABLE_MINIMAL_FLAG} || exit 1
-  make -j${PROCESSORS} install || exit 1
+    # Initialize empty library paths array
+    LIBRARY_PATHS=""
+    MISSING_LIBRARIES=""
 
-  ## x86_64 simulator
-  export CFLAGS="-fembed-bitcode -O2 -arch x86_64 -isysroot ${SDK} -mwatchos-simulator-version-min=${WATCHOS_SIMULATOR_VERSION_MIN}"
-  export LDFLAGS="-fembed-bitcode -arch x86_64 -isysroot ${SDK} -mwatchos-simulator-version-min=${WATCHOS_SIMULATOR_VERSION_MIN}"
+    # Check each required library and add to paths if exists
+    if [ -f "${IOS64_PREFIX}/lib/libsodium.${ext}" ]; then
+      echo "DEBUG: Found ${IOS64_PREFIX}/lib/libsodium.${ext}" >> "$LOG_FILE"
+      LIBRARY_PATHS="$IOS64_PREFIX/lib/libsodium.${ext}"
+    else
+      echo "DEBUG: ERROR - Missing ${IOS64_PREFIX}/lib/libsodium.${ext}" >> "$LOG_FILE"
+      MISSING_LIBRARIES="$MISSING_LIBRARIES arm64"
+    fi
 
-  make distclean >/dev/null 2>&1
-  ./configure --host=x86_64-apple-darwin10 --prefix="$WATCHOS_SIMULATOR_X86_64_PREFIX" \
-    ${LIBSODIUM_ENABLE_MINIMAL_FLAG} || exit 1
-  make -j${PROCESSORS} install || exit 1
-}
+    if [ -f "${IOS64E_PREFIX}/lib/libsodium.${ext}" ]; then
+      echo "DEBUG: Found ${IOS64E_PREFIX}/lib/libsodium.${ext}" >> "$LOG_FILE"
+      LIBRARY_PATHS="$LIBRARY_PATHS $IOS64E_PREFIX/lib/libsodium.${ext}"
+    else
+      echo "DEBUG: ERROR - Missing ${IOS64E_PREFIX}/lib/libsodium.${ext}" >> "$LOG_FILE"
+      MISSING_LIBRARIES="$MISSING_LIBRARIES arm64e"
+    fi
 
-build_tvos() {
-  export BASEDIR="${XCODEDIR}/Platforms/AppleTVOS.platform/Developer"
-  export PATH="${BASEDIR}/usr/bin:$BASEDIR/usr/sbin:$PATH"
-  export SDK="${BASEDIR}/SDKs/AppleTVOS.sdk"
+    # Report any missing libraries
+    if [ -n "$MISSING_LIBRARIES" ]; then
+      echo "WARNING: Missing iOS libraries for architectures:$MISSING_LIBRARIES (.${ext})" >&2
+    fi
 
-  ## 64-bit tvOS
-  export CFLAGS="-fembed-bitcode -O2 -arch arm64 -isysroot ${SDK} -mtvos-version-min=${TVOS_VERSION_MIN}"
-  export LDFLAGS="-fembed-bitcode -arch arm64 -isysroot ${SDK} -mtvos-version-min=${TVOS_VERSION_MIN}"
+    # Only attempt to create output if we have at least one valid input
+    if [ -n "$LIBRARY_PATHS" ]; then
+      echo "DEBUG: Running lipo to combine libraries for iOS: ${LIBRARY_PATHS}" >> "$LOG_FILE"
+      lipo -create \
+        ${LIBRARY_PATHS} \
+        -output "$PREFIX/ios/lib/libsodium.${ext}" || {
+          echo "DEBUG: ERROR - lipo failed for iOS libraries" >> "$LOG_FILE"
+          echo "ERROR: lipo failed for iOS libraries" >&2
+        }
+    else
+      echo "DEBUG: ERROR - No valid iOS libraries found to bundle" >> "$LOG_FILE"
+      echo "ERROR: No valid iOS libraries found to bundle" >&2
+    fi
+  done
+fi
 
-  make distclean >/dev/null 2>&1
-  ./configure --host=arm-apple-darwin10 --prefix="$TVOS64_PREFIX" \
-    ${LIBSODIUM_ENABLE_MINIMAL_FLAG} || exit 1
-  make -j${PROCESSORS} install || exit 1
-}
+if [ -z "$LIBSODIUM_SKIP_SIMULATORS" ]; then
+  echo "Bundling iOS simulators..."
 
-build_tvos_simulator() {
-  export BASEDIR="${XCODEDIR}/Platforms/AppleTVSimulator.platform/Developer"
-  export PATH="${BASEDIR}/usr/bin:$BASEDIR/usr/sbin:$PATH"
-  export SDK="${BASEDIR}/SDKs/AppleTVSimulator.sdk"
-
-  ## arm64 simulator
-  if [ "$APPLE_SILICON_SUPPORTED" = "true" ]; then
-    export CFLAGS="-fembed-bitcode -O2 -arch arm64 -isysroot ${SDK} -mtvos-simulator-version-min=${TVOS_SIMULATOR_VERSION_MIN}"
-    export LDFLAGS="-fembed-bitcode -arch arm64 -isysroot ${SDK} -mtvos-simulator-version-min=${TVOS_SIMULATOR_VERSION_MIN}"
-
-    make distclean >/dev/null 2>&1
-    ./configure --host=arm-apple-darwin20 --prefix="$TVOS_SIMULATOR_ARM64_PREFIX" \
-      ${LIBSODIUM_ENABLE_MINIMAL_FLAG} || exit 1
-    make -j${PROCESSORS} install || exit 1
-  fi
-
-  ## x86_64 simulator
-  export CFLAGS="-fembed-bitcode -O2 -arch x86_64 -isysroot ${SDK} -mtvos-simulator-version-min=${TVOS_SIMULATOR_VERSION_MIN}"
-  export LDFLAGS="-fembed-bitcode -arch x86_64 -isysroot ${SDK} -mtvos-simulator-version-min=${TVOS_SIMULATOR_VERSION_MIN}"
-
-  make distclean >/dev/null 2>&1
-  ./configure --host=x86_64-apple-darwin10 --prefix="$TVOS_SIMULATOR_X86_64_PREFIX" \
-    ${LIBSODIUM_ENABLE_MINIMAL_FLAG}
-  make -j${PROCESSORS} install || exit 1
-}
-
-build_catalyst() {
-  export BASEDIR="${XCODEDIR}/Platforms/MacOSX.platform/Developer"
-  export PATH="${BASEDIR}/usr/bin:$BASEDIR/usr/sbin:$PATH"
-  export SDK="${BASEDIR}/SDKs/MacOSX.sdk"
-
-  ## arm64 catalyst
-  if [ "$APPLE_SILICON_SUPPORTED" = "true" ]; then
-    export CFLAGS="-O2 -arch arm64 -target arm64-apple-ios13.0-macabi -isysroot ${SDK}"
-    export LDFLAGS="-arch arm64 -target arm64-apple-ios13.0-macabi -isysroot ${SDK}"
-
-    make distclean >/dev/null 2>&1
-    ./configure --host=arm-apple-ios --prefix="$CATALYST_ARM64_PREFIX" \
-      ${LIBSODIUM_ENABLE_MINIMAL_FLAG} || exit 1
-    make -j${PROCESSORS} install || exit 1
-  fi
-
-  ## x86_64 catalyst
-  export CFLAGS="-O2 -arch x86_64 -target x86_64-apple-ios13.0-macabi -isysroot ${SDK}"
-  export LDFLAGS="-arch x86_64 -target x86_64-apple-ios13.0-macabi -isysroot ${SDK}"
-
-  make distclean >/dev/null 2>&1
-  ./configure --host=x86_64-apple-ios --prefix="$CATALYST_X86_64_PREFIX" \
-    ${LIBSODIUM_ENABLE_MINIMAL_FLAG} || exit 1
-  make -j${PROCESSORS} install || exit 1
-}
-
-mkdir -p "${PREFIX}/tmp"
-echo "Building for macOS..."
-build_macos >"$LOG_FILE" 2>&1 || exit 1
-echo "Building for iOS..."
-build_ios >"$LOG_FILE" 2>&1 || exit 1
-echo "Building for the iOS simulator..."
-build_ios_simulator >"$LOG_FILE" 2>&1 || exit 1
-echo "Building for watchOS..."
-build_watchos >"$LOG_FILE" 2>&1 || exit 1
-echo "Building for the watchOS simulator..."
-build_watchos_simulator >"$LOG_FILE" 2>&1 || exit 1
-echo "Building for tvOS..."
-build_tvos >"$LOG_FILE" 2>&1 || exit 1
-echo "Building for the tvOS simulator..."
-build_tvos_simulator >"$LOG_FILE" 2>&1 || exit 1
-echo "Building for Catalyst..."
-build_catalyst >"$LOG_FILE" 2>&1 || exit 1
-
-echo "Adding the Clibsodium module map for Swift..."
-
-find "$PREFIX" -name "include" -type d -print | while read -r f; do
-  swift_module_map >"${f}/module.modulemap"
-done
-
-echo "Bundling macOS targets..."
-
-mkdir -p "${PREFIX}/macos/lib"
-cp -a "${MACOS_X86_64_PREFIX}/include" "${PREFIX}/macos/"
-for ext in a dylib; do
-  if [ "$APPLE_SILICON_SUPPORTED" = "true" ]; then
+  mkdir -p "${PREFIX}/ios-simulators/lib"
+  cp -a "${IOS_SIMULATOR_ARM64_PREFIX}/include" "${PREFIX}/ios-simulators/"
+  for ext in a dylib; do
     lipo -create \
-      "${MACOS_ARM64_PREFIX}/lib/libsodium.${ext}" \
-      "${MACOS_X86_64_PREFIX}/lib/libsodium.${ext}" \
-      -output "${PREFIX}/macos/lib/libsodium.${ext}"
-  else
-    lipo -create \
-      "${MACOS_X86_64_PREFIX}/lib/libsodium.${ext}" \
-      -output "${PREFIX}/macos/lib/libsodium.${ext}"
-  fi
-done
-
-echo "Bundling iOS targets..."
-
-mkdir -p "${PREFIX}/ios/lib"
-cp -a "${IOS64_PREFIX}/include" "${PREFIX}/ios/"
-for ext in a dylib; do
-  lipo -create \
-    "$IOS32_PREFIX/lib/libsodium.${ext}" \
-    "$IOS32s_PREFIX/lib/libsodium.${ext}" \
-    "$IOS64_PREFIX/lib/libsodium.${ext}" \
-    -output "$PREFIX/ios/lib/libsodium.${ext}"
-done
-
-echo "Bundling iOS simulators..."
-
-mkdir -p "${PREFIX}/ios-simulators/lib"
-cp -a "${IOS_SIMULATOR_X86_64_PREFIX}/include" "${PREFIX}/ios-simulators/"
-for ext in a dylib; do
-  if [ "$APPLE_SILICON_SUPPORTED" = "true" ]; then
-    lipo -create \
       "${IOS_SIMULATOR_ARM64_PREFIX}/lib/libsodium.${ext}" \
-      "${IOS_SIMULATOR_I386_PREFIX}/lib/libsodium.${ext}" \
-      "${IOS_SIMULATOR_X86_64_PREFIX}/lib/libsodium.${ext}" \
       -output "${PREFIX}/ios-simulators/lib/libsodium.${ext}" || exit 1
-  else
-    lipo -create \
-      "${IOS_SIMULATOR_I386_PREFIX}/lib/libsodium.${ext}" \
-      "${IOS_SIMULATOR_X86_64_PREFIX}/lib/libsodium.${ext}" \
-      -output "${PREFIX}/ios-simulators/lib/libsodium.${ext}" || exit 1
-  fi
-done
+  done
+fi
 
-echo "Bundling watchOS targets..."
-
-mkdir -p "${PREFIX}/watchos/lib"
-cp -a "${WATCHOS64_32_PREFIX}/include" "${PREFIX}/watchos/"
-for ext in a dylib; do
-  lipo -create \
-    "${WATCHOS32_PREFIX}/lib/libsodium.${ext}" \
-    "${WATCHOS64_32_PREFIX}/lib/libsodium.${ext}" \
-    -output "${PREFIX}/watchos/lib/libsodium.${ext}"
-done
-
-echo "Bundling watchOS simulators..."
-
-mkdir -p "${PREFIX}/watchos-simulators/lib"
-cp -a "${WATCHOS_SIMULATOR_X86_64_PREFIX}/include" "${PREFIX}/watchos-simulators/"
-for ext in a dylib; do
-  if [ "$APPLE_SILICON_SUPPORTED" = "true" ]; then
-    lipo -create \
-      "${WATCHOS_SIMULATOR_ARM64_PREFIX}/lib/libsodium.${ext}" \
-      "${WATCHOS_SIMULATOR_I386_PREFIX}/lib/libsodium.${ext}" \
-      "${WATCHOS_SIMULATOR_X86_64_PREFIX}/lib/libsodium.${ext}" \
-      -output "${PREFIX}/watchos-simulators/lib/libsodium.${ext}"
-  else
-    lipo -create \
-      "${WATCHOS_SIMULATOR_I386_PREFIX}/lib/libsodium.${ext}" \
-      "${WATCHOS_SIMULATOR_X86_64_PREFIX}/lib/libsodium.${ext}" \
-      -output "${PREFIX}/watchos-simulators/lib/libsodium.${ext}"
-  fi
-done
-
-echo "Bundling tvOS targets..."
-
-mkdir -p "${PREFIX}/tvos/lib"
-cp -a "${TVOS64_PREFIX}/include" "${PREFIX}/tvos/"
-for ext in a dylib; do
-  lipo -create \
-    "$TVOS64_PREFIX/lib/libsodium.${ext}" \
-    -output "$PREFIX/tvos/lib/libsodium.${ext}"
-done
-
-echo "Bundling tvOS simulators..."
-
-mkdir -p "${PREFIX}/tvos-simulators/lib"
-cp -a "${TVOS_SIMULATOR_X86_64_PREFIX}/include" "${PREFIX}/tvos-simulators/"
-for ext in a dylib; do
-  if [ "$APPLE_SILICON_SUPPORTED" = "true" ]; then
-    lipo -create \
-      "${TVOS_SIMULATOR_ARM64_PREFIX}/lib/libsodium.${ext}" \
-      "${TVOS_SIMULATOR_X86_64_PREFIX}/lib/libsodium.${ext}" \
-      -output "${PREFIX}/tvos-simulators/lib/libsodium.${ext}" || exit 1
-  else
-    lipo -create \
-      "${TVOS_SIMULATOR_X86_64_PREFIX}/lib/libsodium.${ext}" \
-      -output "${PREFIX}/tvos-simulators/lib/libsodium.${ext}" || exit 1
-  fi
-done
-
-echo "Bundling Catalyst targets..."
-
-mkdir -p "${PREFIX}/catalyst/lib"
-cp -a "${CATALYST_X86_64_PREFIX}/include" "${PREFIX}/catalyst/"
-for ext in a dylib; do
-  if [ ! -f "${CATALYST_X86_64_PREFIX}/lib/libsodium.${ext}" ]; then
-    continue
-  fi
-  if [ "$APPLE_SILICON_SUPPORTED" = "true" ]; then
-    lipo -create \
-      "${CATALYST_ARM64_PREFIX}/lib/libsodium.${ext}" \
-      "${CATALYST_X86_64_PREFIX}/lib/libsodium.${ext}" \
-      -output "${PREFIX}/catalyst/lib/libsodium.${ext}"
-  else
-    lipo -create \
-      "${CATALYST_X86_64_PREFIX}/lib/libsodium.${ext}" \
-      -output "${PREFIX}/catalyst/lib/libsodium.${ext}"
-  fi
-done
-
 echo "Creating Clibsodium.xcframework..."
 
 rm -rf "${PREFIX}/Clibsodium.xcframework"
 
 XCFRAMEWORK_ARGS=""
-for f in macos ios ios-simulators watchos watchos-simulators tvos tvos-simulators catalyst; do
-  XCFRAMEWORK_ARGS="${XCFRAMEWORK_ARGS} -library ${PREFIX}/${f}/lib/libsodium.a"
-  XCFRAMEWORK_ARGS="${XCFRAMEWORK_ARGS} -headers ${PREFIX}/${f}/include"
+for f in ios; do
+  XCFRAMEWORK_ARGS="${XCFRAMEWORK_ARGS} -library $(readlink -f ${PREFIX}/${f}/lib/libsodium.a)"
+  XCFRAMEWORK_ARGS="${XCFRAMEWORK_ARGS} -headers $(readlink -f ${PREFIX}/${f}/include)"
 done
+if [ -z "$LIBSODIUM_SKIP_SIMULATORS" ]; then
+  for f in ios-simulators; do
+    XCFRAMEWORK_ARGS="${XCFRAMEWORK_ARGS} -library $(readlink -f ${PREFIX}/${f}/lib/libsodium.a)"
+    XCFRAMEWORK_ARGS="${XCFRAMEWORK_ARGS} -headers $(readlink -f ${PREFIX}/${f}/include)"
+  done
+fi
 xcodebuild -create-xcframework \
   ${XCFRAMEWORK_ARGS} \
   -output "${PREFIX}/Clibsodium.xcframework" >/dev/null
@@ -443,6 +252,51 @@
 
 echo "Done!"
 
+# Print debug information about platform support and environment variables
+echo "Debug information:"
+echo "LIBSODIUM_SKIP_SIMULATORS=${LIBSODIUM_SKIP_SIMULATORS:-'not set'}"
+echo "XCODEDIR=$XCODEDIR"
+
+# Check if iOS platform exists
+if [ ! -d "${XCODEDIR}/Platforms/iPhoneOS.platform" ]; then
+    echo "ERROR: iPhoneOS platform not found at ${XCODEDIR}/Platforms/iPhoneOS.platform"
+fi
+
+# List the iOS build directories that were created (or not)
+echo "iOS build directories:"
+for dir in "$IOS64_PREFIX" "$IOS64E_PREFIX" "$IOS_SIMULATOR_ARM64_PREFIX"; do
+    if [ -d "$dir" ]; then
+        echo "  ✅ $dir"
+    else
+        echo "  ❌ $dir (not created)"
+    fi
+done
+
+# Show the output of the build log for iOS targets
+echo "Last 30 lines of iOS build log:"
+if [ -f "$LOG_FILE" ]; then
+    grep -A 30 "Building for iOS" "$LOG_FILE" || echo "No iOS build messages found in log file"
+else
+    echo "Log file not found: $LOG_FILE"
+fi
+
+# Check for missing frameworks in the final output
+echo "Checking for iOS libraries in final output:"
+if [ -d "${PREFIX}/ios" ]; then
+    echo "  ✅ iOS directory exists: ${PREFIX}/ios"
+    for ext in a dylib; do
+        if [ -f "${PREFIX}/ios/lib/libsodium.${ext}" ]; then
+            echo "  ✅ ${PREFIX}/ios/lib/libsodium.${ext} exists"
+            # Show which architectures are included
+            echo "    Architectures: $(lipo -info "${PREFIX}/ios/lib/libsodium.${ext}")"
+        else
+            echo "  ❌ ${PREFIX}/ios/lib/libsodium.${ext} missing"
+        fi
+    done
+else
+    echo "  ❌ iOS directory missing: ${PREFIX}/ios"
+fi
+
 # Cleanup
 rm -rf -- "$PREFIX/tmp"
-make distclean >/dev/null
\ No newline at end of file
+make distclean >/dev/null
